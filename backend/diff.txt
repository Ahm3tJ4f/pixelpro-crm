diff --git a/backend/src/core/enums.py b/backend/src/core/enums.py
index fa991c5..786c305 100644
--- a/backend/src/core/enums.py
+++ b/backend/src/core/enums.py
@@ -10,3 +10,11 @@ class RedisKeys(str, Enum):
 class UserRole(str, Enum):
     ADMIN = "ADMIN"
     OPERATOR = "OPERATOR"
+
+
+class MeetingStatus(str, Enum):
+    CREATED = "CREATED"
+    PENDING = "PENDING"
+    JOINED = "JOINED"
+    FINISHED = "FINISHED"
+    CANCELLED = "CANCELLED"
diff --git a/backend/src/modules/auth/service.py b/backend/src/modules/auth/service.py
index 3cff9da..0aff93e 100644
--- a/backend/src/modules/auth/service.py
+++ b/backend/src/modules/auth/service.py
@@ -111,18 +111,16 @@ class AuthService:
         return user
 
 
-# Factory function for dependency injection
-def create_auth_service(db: DbSession, redis_client: RedisClient) -> AuthService:
+def get_auth_service(db: DbSession, redis_client: RedisClient) -> AuthService:
     return AuthService(db, redis_client)
 
 
-AuthServiceDep = Annotated[AuthService, Depends(create_auth_service)]
+AuthServiceDep = Annotated[AuthService, Depends(get_auth_service)]
 
 
 def get_current_user_dependency(
-    db: DbSession, redis_client: RedisClient, access_token: Oauth2Token
+    auth_service: AuthServiceDep, access_token: Oauth2Token
 ) -> User:
-    auth_service = AuthService(db, redis_client)
     return auth_service.get_current_user(access_token)
 
 
diff --git a/backend/tests/test_auth.py b/backend/tests/test_auth.py
index 8fffeee..501b4bd 100644
--- a/backend/tests/test_auth.py
+++ b/backend/tests/test_auth.py
@@ -55,12 +55,18 @@ def test_refresh_token_security_flow(testing_client, login_response):
 
     login_payload = {"username": "testuser", "password": "testpassword"}
 
-    login_response_2 = testing_client.post("/auth/login", json=login_payload)
+    new_login_response = testing_client.post("/auth/login", json=login_payload)
 
-    assert login_response_2.status_code == 200
+    assert new_login_response.status_code == 200
 
     payload = {"refreshToken": refresh_response.json()["refreshToken"]}
 
     invalid_token_response = testing_client.post("/auth/refresh", json=payload)
 
     assert invalid_token_response.status_code == 401
+
+    headers = {"Authorization": f"Bearer {new_login_response.json()['accessToken']}"}
+
+    logout_response = testing_client.post("/auth/logout", headers=headers)
+
+    assert logout_response.status_code == 204
